<!DOCTYPE HTML>
<html>
  <head>
    <title>Язык программирования C++</title>
    <link rel="stylesheet" href="normalize.css">
    <link rel="stylesheet" href="style.css">
    
  </head>
  <body>
      <center>
    <img src= "Шапка.WEBP" WIDTH=100% HEIGHT=100%>
      </center>

    <table style="table1" width="100%" height="20px" bgcolor="Silver">
        <tr>
            <th> <br> </th>
        </tr>
        <th><a href="#history">История создания</a></th>
        <th><a href="#overview">Использование языка C++ в программировании</a></th>
        <th><a href="#difficult">Сложно ли изучить C++</a></th>
        <th><a href="#+-">Плюсы и минусы языка программирования C++</a></th>
        <th><a href="#exampl">Пример кода</a></th>
        <tr>
            <th> <br> </th>
        </tr>
    </table>
      <h1><center>Язык программирования C++</center></h1>
<h2 id="history">История создания</h2>
            <figure class="phot">
         <img src="Бьерн.jpg" width="200" height="200" >
                <figcaption><center>Бьёрн Страуструп</center></figcaption>
         </figure>
     <p> 
         Язык возник в начале 1980-х годов, когда сотрудник фирмы Bell Labs Бьёрн Страуструп придумал ряд усовершенствований к языку C под собственные нужды. Когда в конце 1970-х годов Страуструп начал работать в Bell Labs над задачами теории очередей (в приложении к моделированию телефонных вызовов), он обнаружил, что попытки применения существующих в то время языков моделирования оказываются неэффективными, а применение высокоэффективных машинных языков слишком сложно из-за их ограниченной выразительности. Так, язык Симула имеет такие возможности, которые были бы очень полезны для разработки большого программного обеспечения, но работает слишком медленно, а язык BCPL достаточно быстр, но слишком близок к языкам низкого уровня и не подходит для разработки большого программного обеспечения.   
     </p>
      
      <p>
          Вспомнив опыт своей диссертации, Страуструп решил дополнить язык C (преемник BCPL) возможностями, имеющимися в языке Симула. Язык C, будучи базовым языком системы UNIX, на которой работали компьютеры Bell, является быстрым, многофункциональным и переносимым. Страуструп добавил к нему возможность работы с классами и объектами. В результате практические задачи моделирования оказались доступными для решения как с точки зрения времени разработки (благодаря использованию Симула-подобных классов), так и с точки зрения времени вычислений (благодаря быстродействию C). В первую очередь в C были добавлены классы (с инкапсуляцией), наследование классов, строгая проверка типов, inline-функции и аргументы по умолчанию. Ранние версии языка, первоначально именовавшегося «C with classes» («Си с классами»), стали доступны с 1980 года.
      </p>
      
      <p>
          Разрабатывая C с классами, Страуструп написал программу cfront[en] — транслятор, перерабатывающий исходный код C с классами в исходный код простого C. Это позволило работать над новым языком и использовать его на практике, применяя уже имеющуюся в UNIX инфраструктуру для разработки на C. Новый язык, неожиданно для автора, приобрёл большую популярность среди коллег и вскоре Страуструп уже не мог лично поддерживать его, отвечая на тысячи вопросов.
      </p>
      
      <p>
          При создании C++ Бьёрн Страуструп хотел
      </p>
      <ul style="list-style-type: none;list-style-image: url(маркер.png);"> 
<li>Получить универсальный язык со статическими типами данных, эффективностью и переносимостью языка C.</li>
<li>Непосредственно и всесторонне поддерживать множество стилей программирования, в том числе процедурное программирование, абстракцию данных, объектно-ориентированное программирование и обобщённое программирование.</li>
<li>Дать программисту свободу выбора, даже если это даст ему возможность выбирать неправильно.</li>
<li>Максимально сохранить совместимость с C, тем самым делая возможным лёгкий переход от программирования на C.</li>
<li>Избежать разночтений между C и C++: любая конструкция, допустимая в обоих языках, должна в каждом из них обозначать одно и то же и приводить к одному и тому же поведению программы.</li>
<li>Избегать особенностей, которые зависят от платформы или не являются универсальными.</li>
<li>«Не платить за то, что не используется» — никакое языковое средство не должно приводить к снижению производительности программ, не использующих его.</li>
<li>Не требовать слишком усложнённой среды программирования.</li>
      
      </ul>
    
      
       <p>
       Выбор именно C в качестве базы для создания нового языка программирования объясняется тем, что язык C:
       </p>
      <ol>
          <li> является многоцелевым, лаконичным и относительно низкоуровневым языком;</li>
          <li> подходит для решения большинства системных задач;</li>
          <li> исполняется везде и на всём;</li>
          <li> стыкуется со средой программирования UNIX.</li> 
      </ol>
      
      <p>
           Несмотря на ряд известных недостатков языка C, Страуструп пошёл на его использование в качестве основы, так как «в C есть свои проблемы, но их имел бы и разработанный с нуля язык, а проблемы C нам известны». Кроме того, это позволило быстро получить прототип компилятора (cfront), который лишь выполнял трансляцию добавленных синтаксических элементов в оригинальный язык C.
      </p>
      <p>
        По мере разработки C++ в него были включены другие средства, которые перекрывали возможности конструкций C, в связи с чем неоднократно поднимался вопрос об отказе от совместимости языков путём удаления устаревших конструкций. Тем не менее, совместимость была сохранена из следующих соображений:   
      </p>
      <ul>
          <li>сохранение действующего кода, написанного изначально на C и прямо перенесённого в C++; </li>
<li>исключение необходимости переучивания программистов, ранее изучавших C (им требуется только изучить новые средства C++); </li>
<li>исключение путаницы между языками при их совместном использовании («если два языка используются совместно, их различия должны быть или минимальными, или настолько большими, чтобы языки было невозможно перепутать»).</li>
      </ul>
      <p>
      К 1983 году в язык были добавлены новые возможности, такие как виртуальные функции, перегрузка функций и операторов, ссылки, константы, пользовательский контроль над управлением свободной памятью, улучшенная проверка типов и новый стиль комментариев (//). Получившийся язык уже перестал быть просто дополненной версией классического C и был переименован из C с классами в «C++». Его первый коммерческий выпуск состоялся в октябре 1985 года.      
      </p>
      <p>
        Имя языка, получившееся в итоге, происходит от оператора унарного постфиксного инкремента C ++ (увеличение значения переменной на единицу).   
      </p>
      <p>
       До начала официальной стандартизации язык развивался в основном силами Страуструпа в ответ на запросы программистского сообщества. Функцию стандартных описаний языка выполняли написанные Страуструпом печатные работы по C++ (описание языка, справочное руководство и так далее).    
      </p>


<h2 id="overview">Использование языка C++ в программировании</h2>
      
      <figure class="phot2">
         <img src="gdeispol.png" width="500" height="300" >
                <figcaption><center>Использование языка C++ в программировании</center></figcaption>
          </figure>

     <p>
	В отличие от других языков, на C++ можно программировать всё что угодно. Это язык низкого уровня, то есть на нём можно сделать то, что требует каких-то специфических инструкций, например векторных, которые позволяют выполнять сразу несколько операций на одном ядре процессора.
    </p>
    <p>
	C++ спроектирован так, чтобы код мог компилироваться для разных платформ. Например, браузер Chrome, написанный преимущественно на языке C++, работает на Windows, Linux и macOS. Для языков, поддерживающих низкий уровень, это редкость.
    </p>

     <p>
	Другого языка с такими же функциями нет. Некоторые пытаются к этому стремиться, например язык программирования Rust. А многие даже и не пытаются — заведомо не получится.
    </p>
 
    <p>
	Примеров использования C++ много, потому что его кодовая база огромна. На нём написано всё, начиная от микрокода дефибриллятора до операционных систем и компиляторов других языков программирования. Например, при записи голосовых сообщений звук кодируется с помощью кодека, который написан на C++. Далее передаётся через сетевую карту по сети через маршрутизаторы и декодируется на сервере. Всё ПО для этого написано на C++.
    </p>
      <p>
	Язык программирования C++ подходит для создания проектов 3D-визуализации, где нужно эффективное управление огромными объёмами данных. Благодаря своей производительности C++ используется для разработки игр, операционных систем, браузеров. На нём разработаны приложения и программы, которыми каждый пользовался хотя бы раз. Например, у Spotify код бэкенда написан на C++, и он же используется при обработке и воспроизведении видео на YouTube.
    </p>
      <p>
	Получить базовые знания о языке С++ можно самостоятельно, изучая материалы по сайтам с документацией и видеоурокам на YouTube. А можно на курсах, где наставники и ревьюеры помогают студентам разобраться с базовыми алгоритмами и структурами данных и писать чистый, работающий код.
    </p>



    <ul>
        <li>Позволяет писать производительный и эффективный код.</li>
        <li>Поддерживает объектно-ориентированное программирование.</li>
        <li>Обладает богатыми возможностями для работы с памятью.</li>
        <li>Позволяет использовать шаблоны для обобщенного программирования.</li>
   </ul>

        <h2 id="difficult">Сложно ли изучить C++</h2>
       <p>
        В C++ можно детально регулировать большинство операций. Например, указывать собственный аллокатор — контроллер операций с памятью. Чем больше возможностей, тем легче ошибиться и тем больше нужно знать, чтобы правильно пользоваться этими возможностями. Поэтому начать программировать на C++ может быть сложнее, чем на другом языке, который не позволяет производить такую тонкую настройку. Всё зависит от того, какую задачу необходимо решить. Например, для программирования высоконагруженных систем нужно понимать принципы работы процессора.
       </p>
      <p>
        Чтобы начать изучать C++, нужны те же базовые знания и умения, что и для изучения любого языка программирования: понимать, что такое алгоритм и как он работает. Чтобы профессионально писать код на C++, нужно знать его Стандарт. 

       </p>
      <p>
       Каждая функция и класс стандартной библиотеки языка C++ сделаны так, чтобы максимально общим образом решать задачи и при этом иметь минимальный overhead. Из-за этого многое на этом языке выглядит сложнее, например, обычный текст, который в языке Python представлен типом str, в C++ представляется сложным типом, полный вид которого выглядит так: std::basic_string <char, std::char_traits<char>, std::allocator<char>>.  
       </p>
      <p>
        
       </p>
	<h2 id="+-">Плюсы и минусы языка программирования C++</h2>

      
      <table class="darkTable">
  <thead>
    <tr>
      <th></th>
      <th>✅ Преимущества</th>
      <th>❌ Недостатки</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Отсутствие overhead</td>
      <td>Довольно сложный язык для изучения</td>

    </tr>
    <tr>
      <td>2</td>
      <td>Нет потребления ресурсов на вспомогательные операции</td>
      <td>Обычно он используется для приложений, зависящих от платформы</td>

    </tr>
    <tr>
      <td>3</td>
      <td>Метапрограммирование — возможность поручать большую часть работы компилятору</td>
      <td>Юни-код Java для правил ASCII 16-разрядный, в то время как программа на C ++ только 8-разрядная, так что C ++ может быть менее впечатляющим языком программирования, но экономит память.</td>

    </tr>
    <tr>
      <td>4</td>
      <td>C++ — строгий язык, в нём уже на этапе компиляции ясно, что будет делать программа. </td>
      <td>Низкоуровневость. Язык С++ дает возможность обращаться к указателям а также требует явного выделения и освобождения памяти. Это приводит к большему объему кода и большим возможностям для ошибок.</td>
 
    </tr>
    <tr>
      <td>5</td>
      <td>На этапе компиляции можно сделать ряд вычислений и оптимизаций, чтобы программа работала быстрее</td>
      <td>Если что-то не работает или нужного пакета нет необходимо вручную скачивать исходники нужной библиотеки со всеми зависимостями. При этом следить за параметрами компиляции. </td>
    </tr> 
    
  </tbody>
</table>
          

<h2 id="exampl">Пример кода</h2>
    <p>Ниже приведен пример кода на языке C++:</p>
    <div class="code">
        <span class="code-comment">// Программа для вывода сообщения "Hello, World!" на экран</span>
        <span class="code-keyword">#include</span> <span class="code-string">&lt;iostream&gt;</span>

        <span class="code-keyword">int</span> <span class="code-keyword">main</span>() {
            <span class="code-keyword">std::cout</span> &lt;&lt; <span class="code-string">"Hello, World!"</span> &lt;&lt; <span class="code-keyword">std::endl</span>;
            <span class="code-keyword">return</span> <span class="code-keyword">0</span>;
        }
        
        <h2>Использованные html-теги</h2><br>
    <ol><li>html
<li>head
<li>title
<li>body
<li>meta
<li>link
<li>h1
<li>script
<li>center
<li>img
<li>p
<li>ol
<li>li
<li>br
<li>h2
<li>u
<li>h3  
<li>span
<li>ul
<li>able
<li>caption
<li>thead
<li>tr
<li>th
<li>td
<li>div
<li>b
<li>pre
<li>code
<li>i
    </ol>

    <h2>Использованные ccs-свойства</h2><br>
    <ol>
   <li> font-family: shrift;
   <li> src: url("Dealerplate.ttf");
    <li>list-style-image: url(лого.jpg);
   <li> margin: 4px 10px 2px 0px;
    <li> 4px 10px 2px 0px;
   <li> border: 1px solid #CCC;
    <li> padding: 6px;
   <li> border: 1px solid #CCC;
   <li> padding: 6px;
   <li> text-align: center;
   <li>font-size: 24pt;
   <li> font-size: 18pt;
   <li> font-size: 14pt;
   <li> float:left;
   <li> display: inline-block;
   <li> border-bottom: 2px dashed rgba(0,0,0,0.9);
   <li> text-decoration: none;
   <li> font-style: italic;
   <li> letter-spacing: 0.5em;
   <li> text-transform: uppercase;
   <li> text-decoration: line-through;
   <li> border:solid;
   <li> vertical-align: 10px;
   <li> color: #777;
   <li> margin: 1em auto;
   <li> border-collapse: collapse;
   <li> font-family: Arial, Helvetica, sans-serif;
   <li> padding: 4px 8px;
   <li> background: #4f81bd;
   <li> text-transform: lowercase;
   <li> text-align: left;
   <li> font-size: 15px;
   <li> color: #fff;
   <li> border-right: 1px solid #95b3d7;
   <li> border-bottom: 1px solid #95b3d7;
   <li> background: #dbe5f0;
   <li> border-right: 1px solid #95b3d7;
   <li> background: #4f81bd;
   <li> text-align: left;
   <li> font-weight: normal;
   <li> font-size: 10px;
   <li> text-align: right;
       </ol>
        
    </div>
  </body>
</html>